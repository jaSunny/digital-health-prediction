SET SCHEMA TUKGRP1;
-- CREATING view with features
DROP VIEW TRAINING_FEATURES;
CREATE VIEW TRAINING_FEATURES AS
(SELECT A.ID AS ID, TO_INT(A.has_hypertension) AS SICK,
        (SELECT ID FROM GENDER_TO_INT AS TI WHERE TI.CLASSV = A.GENDER) AS FEATURE_GENDER,
        (SELECT ID FROM BIRTH_DATE_TO_INT AS TI WHERE TI.CLASSV = A.BIRTH_DATE) AS FEATURE_BIRTH_DATE,
        YEAR(A.BIRTH_DATE) AS FEATURE_BIRTH_YEAR,
        (2017 - YEAR(A.BIRTH_DATE)) AS FEATURE_AGE,
        (SELECT ID FROM HEIGHT_TO_INT AS TI WHERE TI.CLASSV = A.HEIGHT) AS FEATURE_HEIGHT,
        (SELECT ID FROM ZIP_TO_INT AS TI WHERE TI.CLASSV = A.ZIP) AS FEATURE_ZIP,
        (SELECT ID FROM SMOKING_PACKS_A_DAY_TO_INT AS TI WHERE TI.CLASSV = A.SMOKING_PACKS_A_DAY) AS FEATURE_SMOKING_PACKS_A_DAY,
        (SELECT ID FROM ACTIVITY_LEVEL_TO_INT AS TI WHERE TI.CLASSV = A.ACTIVITY_LEVEL) AS FEATURE_ACTIVITY_LEVEL,
        (SELECT ID FROM BLOOD_TYPE_TO_INT AS TI WHERE TI.CLASSV = A.BLOOD_TYPE) AS FEATURE_BLOOD_TYPE,
        (SELECT ID FROM AVG_SLEEP_TIME_TO_INT AS TI WHERE TI.CLASSV = A.AVG_SLEEP_TIME) AS FEATURE_AVG_SLEEP_TIME,
        ROUND(A.AVG_SLEEP_TIME * 10, -1) AS ROUND_AVG_SLEEP_TIME,
        (SELECT ID FROM COMMUTING_DISTANCE_TO_INT AS TI WHERE TI.CLASSV = A.COMMUTING_DISTANCE) AS FEATURE_COMMUTING_DISTANCE,
        A.DRINKS_ALCOHOL AS FEATURE_DRINKS_ALCOHOL,
        ROUND((A.WEIGHT / (A.HEIGHT/100 * A.HEIGHT/100))* 1000000, -1) AS FEATURE_BMI,
        -- FEATURE_SLEEP_BY_AGE
        CASE WHEN  (2017 - YEAR(A.BIRTH_DATE)) > 0 THEN
                ROUND((A.AVG_SLEEP_TIME / (2017 - YEAR(A.BIRTH_DATE))) * 1000000, -1)
        ELSE
                0
        END AS FEATURE_SLEEP_BY_AGE,
        -- FEATURE_ACTIVITY_LVL_COMMUTING_DIS_BY_AGE
        CASE WHEN  (2017 - YEAR(A.BIRTH_DATE)) > 0 THEN
                ROUND((A.ACTIVITY_LEVEL * A.COMMUTING_DISTANCE / (2017 - YEAR(A.BIRTH_DATE))) * 1000000, -1)
        ELSE
                0
        END AS FEATURE_ACTIVITY_LVL_COMMUTING_DIS_BY_AGE,
        -- FEATURE_COMMUTING_DRUNK_AGE
        CASE WHEN  (2017 - YEAR(A.BIRTH_DATE)) > 0 THEN
                CASE WHEN A.SMOKING_PACKS_A_DAY > 0 THEN
                        ROUND((A.SMOKING_PACKS_A_DAY * (A.WEIGHT / (A.HEIGHT/100 * A.HEIGHT/100)) / (2017 - YEAR(A.BIRTH_DATE))) * 1000000, -1)
                ELSE
                        0
                END
        ELSE
                0
        END AS FEATURE_BMI_SMOKING_BY_AGE,
        -- FEATURE_COMMUTING_DRUNK_AGE
        CASE WHEN A.DRINKS_ALCOHOL > 0 THEN
                ROUND((A.COMMUTING_DISTANCE*(2017 - YEAR(A.BIRTH_DATE))) * 1000000, -1)
        ELSE
                0
        END AS FEATURE_COMMUTING_DRUNK_AGE,
        -- FEATURE_SLEEP_POS_OFFSET_BY_AGE
        CASE WHEN  A.AVG_SLEEP_TIME > (SELECT MAX_SLEEP FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) THEN
                ROUND((A.AVG_SLEEP_TIME - (SELECT MAX_SLEEP FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME)) * 1000000, -1)
        ELSE
                0
        END AS FEATURE_SLEEP_POS_OFFSET_BY_AGE,
        -- FEATURE_SLEEP_NEG_OFFSET_BY_AGE
        CASE WHEN  A.AVG_SLEEP_TIME < (SELECT MIN_SLEEP FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) THEN
            ROUND(((SELECT MIN_SLEEP FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) - A.AVG_SLEEP_TIME) * 1000000, -1)
        ELSE
          0
        END AS FEATURE_SLEEP_NEG_OFFSET_BY_AGE,
        -- FEATURE_SLEEP_OFFSET_BY_AGE_FROM_MEAN
        CASE WHEN  A.AVG_SLEEP_TIME > (SELECT MIN_SLEEP FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) THEN
            ROUND(((SELECT ((MIN_SLEEP+MAX_SLEEP)/2) FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) - A.AVG_SLEEP_TIME) * 1000000, -1)
        ELSE
          0
        END AS FEATURE_SLEEP_OFFSET_BY_AGE_FROM_MEAN,
        -- FEATURE_LN_ACTIVITY_SLEEP_BMI
        CASE WHEN ((A.ACTIVITY_LEVEL+2)*((SELECT ((MIN_SLEEP+MAX_SLEEP)/2) FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) - A.AVG_SLEEP_TIME)+(A.WEIGHT / (A.HEIGHT/100 * A.HEIGHT/100))) > 0 THEN
          ROUND(ln(((A.ACTIVITY_LEVEL+2)*((SELECT ((MIN_SLEEP+MAX_SLEEP)/2) FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) - A.AVG_SLEEP_TIME)+(A.WEIGHT / (A.HEIGHT/100 * A.HEIGHT/100))))* 1000000, -1)
        ELSE
          0
        END AS FEATURE_LN_ACTIVITY_SLEEP_BMI,
        -- FEATURE_LN_ACTIVITY_SLEEP
        CASE WHEN ((A.ACTIVITY_LEVEL+2)*((SELECT ((MIN_SLEEP+MAX_SLEEP)/2) FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) - A.AVG_SLEEP_TIME)) > 0 THEN
           ROUND(ln((A.ACTIVITY_LEVEL+2)*((SELECT ((MIN_SLEEP+MAX_SLEEP)/2) FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) - A.AVG_SLEEP_TIME))* 1000000, -1)
        ELSE
          0
        END AS FEATURE_LN_ACTIVITY_SLEEP,
        -- FEATURE_ACTIVITY_SLEEP
        CASE WHEN ROUND((A.ACTIVITY_LEVEL+2)*((SELECT ((MIN_SLEEP+MAX_SLEEP)/2) FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) - A.AVG_SLEEP_TIME)* 1000000, -1) > 0 THEN
            ROUND((A.ACTIVITY_LEVEL+2)*((SELECT ((MIN_SLEEP+MAX_SLEEP)/2) FROM REC_SLEEP_BY_AGE AS TI WHERE TI.MIN_AGE <= A.AVG_SLEEP_TIME AND TI.MAX_AGE >= A.AVG_SLEEP_TIME) - A.AVG_SLEEP_TIME)* 100, -1)
        ELSE
          0
        END AS FEATURE_ACTIVITY_SLEEP
FROM tuk.PERSONS_ML2 AS A);

-- CREATING view with features for TRAINING_FEATURES_CLASSIFIED
DROP VIEW TRAINING_FEATURES_CLASSIFIED;
CREATE VIEW TRAINING_FEATURES_CLASSIFIED AS
(SELECT * FROM TRAINING_FEATURES WHERE SICK is not null);

-- CREATING view with features for TRAINING_FEATURES_UNCLASSIFIED
DROP VIEW TRAINING_FEATURES_UNCLASSIFIED;
CREATE VIEW TRAINING_FEATURES_UNCLASSIFIED AS
(SELECT * FROM TRAINING_FEATURES WHERE SICK is null);
